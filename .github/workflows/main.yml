name: CI-Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# env:
    # BUILD_TYPE: Debug
#   CODECOV_TOKEN: "8cf7e822-d3dc-4ad8-9f7a-17cd58d18f80"

jobs:

  build:
    
    name: ${{ matrix.os }}-${{ matrix.cxx }}-${{ matrix.buildtype }}-and-test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 8
      matrix:
        name: [ubuntu-gcc, ubuntu-clang, macos-clang, windows-msvc]
        buildtype: [Debug, Release]
        include:
          - name: windows-msvc
            os: windows-latest
            cxx: cl.exe
            cc: cl.exe
            triplet: x64-windows
            packages: >
              tiff opencl 
          - name: ubuntu-gcc
            os: ubuntu-latest
            cxx: g++
            cc: gcc
            triplet: x64-linux
            packages: >
              tiff opencl
          - name: ubuntu-clang
            os: ubuntu-latest
            cxx: clang++
            cc: clang
            triplet: x64-linux
            packages: >
              tiff opencl
          - name: macos-clang
            os: macos-latest
            cxx: clang++
            cc: clang
            triplet: x64-osx
            packages: >
              tiff khronos-opencl-clhpp

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true 
      
      - name: Install cmake
        uses: lukka/get-cmake@latest

      # - name: Install Dependencies - ubuntu
      #   if: startsWith(matrix.os, 'ubuntu')
      #   run: |
      #     sudo apt update
      #     sudo apt install -y ocl-icd-khronos-opencl-clhpp-dev libtiff-dev 

      # - name: Instal Dependencies - windows
      #   if: matrix.name == 'windows-msvc'
      #   uses: crazy-max/ghaction-chocolatey@v1
      #   with:
      #     args: install khronos-opencl-clhpp-intel-cpu-runtime

      - name: Set Environment vars
        run: |
          echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV
          echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
      
      - name: Run vcpkg
        uses: lukka/run-vcpkg@main
        with:
          vcpkgArguments: ${{ matrix.packages }}
          vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
          vcpkgTriplet: ${{ matrix.triplet }}
          vcpkgGitCommitId: 7db401cb1ef1fc559ec9f9ce814d064c328fd767    

      - name: Run CMake with Ninja
        uses: lukka/run-cmake@main
        id: runcmake
        with:
          buildDirectory: ${{ runner.workspace }}/build
          cmakeBuildType: ${{ matrix.buildtype }}
          cmakeGenerator: 'Ninja'  
          cmakeListsOrSettingsJson: 'CMakeListsTxtBasic'
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildWithCMakeArgs: '-- -v'
          cmakeAppendedArgs: '-DBUILD_CODE_COVERAGE=ON'

      - name: Run Tests
        if: startsWith(matrix.os, 'macos') | startsWith(matrix.os, 'windows')
        working-directory: ${{ runner.workspace }}/build
        shell: bash
        run: ctest -T test -T coverage

      # - name: Code Coverage report
      #   shell: bash
      #   run: |
      #     lcov --directory . --capture --output-file coverage.info
      #     lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
      #     lcov --list coverage.info
      #     bash <(curl -s https://codecov.io/bash) -f coverage.info 
